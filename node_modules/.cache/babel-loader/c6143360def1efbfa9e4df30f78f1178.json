{"ast":null,"code":"/* eslint-disable */\n// #region imports\nimport cookies from 'react-cookies'; // #endregion\n// #region flow types\n// #endregion\n// #region constants\n\nconst TOKEN_KEY = 'Token';\nconst APP_PERSIST_STORES_TYPES = ['cacheStorage', 'localStorage', 'sessionStorage'];\nconst {\n  parse\n} = JSON;\nconst {\n  stringify\n} = JSON; // #endregion\n\n/*\r\n  auth object\r\n  -> store \"TOKEN_KEY\"\r\n  - default storage is \"localStorage\"\r\n  - default token key is 'token'\r\n */\n\nexport const auth = {\n  // /////////////////////////////////////////////////////////////\n  // TOKEN\n  // /////////////////////////////////////////////////////////////\n\n  /**\r\n   * get token from localstorage\r\n   *\r\n   * @param {'localStorage' | 'sessionStorage'} [fromStorage='localStorage'] specify storage\r\n   * @param {any} [tokenKey=TOKEN_KEY]  optionnal parameter to specify a token key\r\n   * @returns {string} token value\r\n   */\n  getToken() {\n    return getStorage(TOKEN_KEY, APP_PERSIST_STORES_TYPES[0]);\n  },\n\n  setToken(token) {\n    return setStorage(token, TOKEN_KEY, APP_PERSIST_STORES_TYPES[0]);\n  } // /**\n  //  * set the token value into localstorage (managed by localforage)\n  //  *\n  //  * @param {string} [value=''] token value\n  //  * @param {'localStorage' | 'sessionStorage'} [toStorage='localStorage'] specify storage\n  //  * @param {any} [tokenKey='token'] token key\n  //  * @returns {boolean} success/failure flag\n  //  */\n  // clearStorage(callback) {\n  //   for (let i = 0; i < localStorage.length; i++) {\n  //     if (localStorage.key(i).indexOf(DASHBOARD_KEY) === -1 && localStorage.key(i).indexOf(AVATAR_KEY) === -1) {\n  //       localStorage.removeItem(localStorage.key(i));\n  //       i -= 1;\n  //     }\n  //   }\n  //   cookies.remove(TOKEN_KEY, { path: '/' });\n  //   cookies.remove(LOGIN_TRY_KEY, { path: '/' });\n  //   if (callback) {\n  //     callback(true)\n  //   }\n  // },\n  // clearLocalStorage() {\n  //   for (let i = 0; i < localStorage.length; i++) {\n  //     if (localStorage.key(i).indexOf(DASHBOARD_KEY) === -1 && localStorage.key(i).indexOf(AVATAR_KEY) === -1) {\n  //       localStorage.removeItem(localStorage.key(i));\n  //       i -= 1;\n  //     }\n  //   }\n  // },  \n  // clearAllAppStorage() {\n  //   if (localStorage) {\n  //     localStorage.clear();\n  //   }\n  //   if (sessionStorage) {\n  //     sessionStorage.clear();\n  //   }\n  //   cookies.remove(TOKEN_KEY, { path: \"/\" })\n  // },\n\n\n};\n\nfunction setStorage(values, key) {\n  let toStorage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : APP_PERSIST_STORES_TYPES[1];\n\n  if (toStorage === APP_PERSIST_STORES_TYPES[0]) {\n    cookies.remove(key, {\n      path: \"/\"\n    });\n    cookies.save(key, values, {\n      path: \"/\"\n    });\n  } else if (toStorage === APP_PERSIST_STORES_TYPES[1]) {\n    localStorage.setItem(key, values);\n  } else {\n    sessionStorage.setItem(key, values);\n  }\n}\n\nfunction getStorage(key) {\n  let toStorage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : APP_PERSIST_STORES_TYPES[1];\n\n  if (toStorage === APP_PERSIST_STORES_TYPES[0]) {\n    if (cookies.load(key, {\n      path: '/'\n    })) {\n      return cookies.load(key, {\n        path: '/'\n      });\n    }\n\n    return null;\n  }\n\n  if (toStorage === APP_PERSIST_STORES_TYPES[1]) {\n    return localStorage.getItem(key);\n  }\n\n  return sessionStorage.getItem(key);\n} // function clearStorage(key, toStorage = APP_PERSIST_STORES_TYPES[0]) {\n//   if (toStorage === APP_PERSIST_STORES_TYPES[0]) {\n//     return cookie.remove(key)\n//   } if (toStorage === APP_PERSIST_STORES_TYPES[1]) {\n//     return localStorage.removeItem(key);\n//   } \n//     return sessionStorage.removeItem(key)\n// }\n\n\nexport default auth;","map":{"version":3,"names":["cookies","TOKEN_KEY","APP_PERSIST_STORES_TYPES","parse","JSON","stringify","auth","getToken","getStorage","setToken","token","setStorage","values","key","toStorage","remove","path","save","localStorage","setItem","sessionStorage","load","getItem"],"sources":["C:/Ekinoks/React/deneme/src/serdarAbi/auth.js"],"sourcesContent":["// @flow\r\n /* eslint-disable */\r\n// #region imports\r\nimport cookies from 'react-cookies'\r\n// #endregion\r\n\r\n// #region flow types\r\n\r\n// #endregion\r\n\r\n// #region constants\r\nconst TOKEN_KEY = 'Token';\r\nconst APP_PERSIST_STORES_TYPES = [\r\n  'cacheStorage',\r\n  'localStorage',\r\n  'sessionStorage',\r\n];\r\n\r\nconst {parse} = JSON;\r\nconst {stringify} = JSON;\r\n// #endregion\r\n\r\n/*\r\n  auth object\r\n  -> store \"TOKEN_KEY\"\r\n  - default storage is \"localStorage\"\r\n  - default token key is 'token'\r\n */\r\n\r\nexport const auth = {\r\n  // /////////////////////////////////////////////////////////////\r\n  // TOKEN\r\n  // /////////////////////////////////////////////////////////////\r\n\r\n  /**\r\n   * get token from localstorage\r\n   *\r\n   * @param {'localStorage' | 'sessionStorage'} [fromStorage='localStorage'] specify storage\r\n   * @param {any} [tokenKey=TOKEN_KEY]  optionnal parameter to specify a token key\r\n   * @returns {string} token value\r\n   */\r\n  getToken() {\r\n    return getStorage(TOKEN_KEY, APP_PERSIST_STORES_TYPES[0])\r\n  },\r\n  setToken(token) {\r\n    return setStorage(token,TOKEN_KEY, APP_PERSIST_STORES_TYPES[0])\r\n  },\r\n  \r\n  // /**\r\n  //  * set the token value into localstorage (managed by localforage)\r\n  //  *\r\n  //  * @param {string} [value=''] token value\r\n  //  * @param {'localStorage' | 'sessionStorage'} [toStorage='localStorage'] specify storage\r\n  //  * @param {any} [tokenKey='token'] token key\r\n  //  * @returns {boolean} success/failure flag\r\n  //  */\r\n  \r\n\r\n  // clearStorage(callback) {\r\n  //   for (let i = 0; i < localStorage.length; i++) {\r\n  //     if (localStorage.key(i).indexOf(DASHBOARD_KEY) === -1 && localStorage.key(i).indexOf(AVATAR_KEY) === -1) {\r\n  //       localStorage.removeItem(localStorage.key(i));\r\n  //       i -= 1;\r\n  //     }\r\n  //   }\r\n  //   cookies.remove(TOKEN_KEY, { path: '/' });\r\n  //   cookies.remove(LOGIN_TRY_KEY, { path: '/' });\r\n  //   if (callback) {\r\n  //     callback(true)\r\n  //   }\r\n  // },\r\n  // clearLocalStorage() {\r\n  //   for (let i = 0; i < localStorage.length; i++) {\r\n  //     if (localStorage.key(i).indexOf(DASHBOARD_KEY) === -1 && localStorage.key(i).indexOf(AVATAR_KEY) === -1) {\r\n  //       localStorage.removeItem(localStorage.key(i));\r\n  //       i -= 1;\r\n  //     }\r\n  //   }\r\n  // },  \r\n  // clearAllAppStorage() {\r\n  //   if (localStorage) {\r\n  //     localStorage.clear();\r\n  //   }\r\n  //   if (sessionStorage) {\r\n  //     sessionStorage.clear();\r\n  //   }\r\n  //   cookies.remove(TOKEN_KEY, { path: \"/\" })\r\n \r\n  // },\r\n};\r\n\r\nfunction setStorage(values, key, toStorage = APP_PERSIST_STORES_TYPES[1]) {\r\n  if (toStorage === APP_PERSIST_STORES_TYPES[0]) {\r\n    cookies.remove(key, { path: \"/\" })\r\n    cookies.save(key, values, { path: \"/\" });\r\n  }\r\n else if (toStorage === APP_PERSIST_STORES_TYPES[1]) {\r\n    localStorage.setItem(key, values)\r\n  }\r\n else {\r\n    sessionStorage.setItem(key, values)\r\n  }\r\n}\r\n\r\nfunction getStorage(key, toStorage = APP_PERSIST_STORES_TYPES[1]) {\r\n  if (toStorage === APP_PERSIST_STORES_TYPES[0]) {\r\n    if (cookies.load(key, { path: '/' })) {\r\n      return cookies.load(key, { path: '/' });\r\n    } \r\n      return null;\r\n    \r\n  } if (toStorage === APP_PERSIST_STORES_TYPES[1]) {\r\n    return localStorage.getItem(key)\r\n  } \r\n    return sessionStorage.getItem(key)\r\n  \r\n}\r\n\r\n// function clearStorage(key, toStorage = APP_PERSIST_STORES_TYPES[0]) {\r\n//   if (toStorage === APP_PERSIST_STORES_TYPES[0]) {\r\n//     return cookie.remove(key)\r\n//   } if (toStorage === APP_PERSIST_STORES_TYPES[1]) {\r\n//     return localStorage.removeItem(key);\r\n//   } \r\n//     return sessionStorage.removeItem(key)\r\n  \r\n// }\r\n\r\nexport default auth;"],"mappings":"AACC;AACD;AACA,OAAOA,OAAP,MAAoB,eAApB,C,CACA;AAEA;AAEA;AAEA;;AACA,MAAMC,SAAS,GAAG,OAAlB;AACA,MAAMC,wBAAwB,GAAG,CAC/B,cAD+B,EAE/B,cAF+B,EAG/B,gBAH+B,CAAjC;AAMA,MAAM;EAACC;AAAD,IAAUC,IAAhB;AACA,MAAM;EAACC;AAAD,IAAcD,IAApB,C,CACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAME,IAAI,GAAG;EAClB;EACA;EACA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,QAAQ,GAAG;IACT,OAAOC,UAAU,CAACP,SAAD,EAAYC,wBAAwB,CAAC,CAAD,CAApC,CAAjB;EACD,CAdiB;;EAelBO,QAAQ,CAACC,KAAD,EAAQ;IACd,OAAOC,UAAU,CAACD,KAAD,EAAOT,SAAP,EAAkBC,wBAAwB,CAAC,CAAD,CAA1C,CAAjB;EACD,CAjBiB,CAmBlB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;;;AA3DkB,CAAb;;AA8DP,SAASS,UAAT,CAAoBC,MAApB,EAA4BC,GAA5B,EAA0E;EAAA,IAAzCC,SAAyC,uEAA7BZ,wBAAwB,CAAC,CAAD,CAAK;;EACxE,IAAIY,SAAS,KAAKZ,wBAAwB,CAAC,CAAD,CAA1C,EAA+C;IAC7CF,OAAO,CAACe,MAAR,CAAeF,GAAf,EAAoB;MAAEG,IAAI,EAAE;IAAR,CAApB;IACAhB,OAAO,CAACiB,IAAR,CAAaJ,GAAb,EAAkBD,MAAlB,EAA0B;MAAEI,IAAI,EAAE;IAAR,CAA1B;EACD,CAHD,MAII,IAAIF,SAAS,KAAKZ,wBAAwB,CAAC,CAAD,CAA1C,EAA+C;IACjDgB,YAAY,CAACC,OAAb,CAAqBN,GAArB,EAA0BD,MAA1B;EACD,CAFG,MAGA;IACFQ,cAAc,CAACD,OAAf,CAAuBN,GAAvB,EAA4BD,MAA5B;EACD;AACF;;AAED,SAASJ,UAAT,CAAoBK,GAApB,EAAkE;EAAA,IAAzCC,SAAyC,uEAA7BZ,wBAAwB,CAAC,CAAD,CAAK;;EAChE,IAAIY,SAAS,KAAKZ,wBAAwB,CAAC,CAAD,CAA1C,EAA+C;IAC7C,IAAIF,OAAO,CAACqB,IAAR,CAAaR,GAAb,EAAkB;MAAEG,IAAI,EAAE;IAAR,CAAlB,CAAJ,EAAsC;MACpC,OAAOhB,OAAO,CAACqB,IAAR,CAAaR,GAAb,EAAkB;QAAEG,IAAI,EAAE;MAAR,CAAlB,CAAP;IACD;;IACC,OAAO,IAAP;EAEH;;EAAC,IAAIF,SAAS,KAAKZ,wBAAwB,CAAC,CAAD,CAA1C,EAA+C;IAC/C,OAAOgB,YAAY,CAACI,OAAb,CAAqBT,GAArB,CAAP;EACD;;EACC,OAAOO,cAAc,CAACE,OAAf,CAAuBT,GAAvB,CAAP;AAEH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA,eAAeP,IAAf"},"metadata":{},"sourceType":"module"}